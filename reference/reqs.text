-- Local storage module --
https://github.com/grevory/angular-local-storage/blob/master/angular-local-storage.js


//-- reqs

Here's what we want to do with the HTML5 player. This is based on our OSX app which
we were planning on mimicking. It's similar to the Android app in functionality.

All Stations - what it says. You can either play or mark stations as favorites from
here. Stars indicate favorites. Sort by name, popularity (number of current
listeners), and genre.

Favorite Stations - Same except limited to your favorites. Unstar something to
remove it from your favorite. (Probably should get confirmation to remove from
favorites on this page.)

Now Playing - Shows the last 10 or so songs played. Updated from the XML Feed. I'll
send you separate notes on that. *I THINK* we should make the play/volume control
visible all the time, not just on this page. When you play a station from the
channel picker list, it goes to this screen. You can favorite songs, or buy/search
for them on Amazon from this screen.

Favorite Songs - I think we'll have to make this cookie based. Not sure I want to
build out a backend database and require logins at this time. We can omit this for a
first release.

Community - This is basically a portal to a few HTML feeds. The top buttons select
the pages that would be displayed in an IFRAME possibly, or however you want to do
it. If this turns out to be too much effort, we can omit this as well, as it's just
a duplicate of what's on the website.

** I'd be happy to get out the door with just 2 screens: All Stations & Now Playing.



//---------------------------
//---------------------------
//-- LOADING XML IN ANGULAR
//---------------------------
//---------------------------

The Finished Product
JSON is a native object to AngularJS so working solely with JSON examples is easy. In the real world, however, you’ll probably need to deal with other types of data sources, like XML. Before I get too wordy, let’s start with what you’re really here for…the example:


The Explanation
While the finished product looks like the result of 15 minutes of coding, I have to admit that it took me significantly longer to figure out. If you search the Angular Developer Guide or API for “XML” you’re going to come up woefully absent of useful results. Googling won’t get you much further. As frustration began to set in, I started thinking about what made loading an XML file more difficult than loading a JSON file. The answer is: not much!

Bridging the Language Gap
Angular likes JSON, and can you blame it? Angular is a JavaScript toolset and JSON is JavaScript Object Notation, a native brethren. XML, on the other hand, is tag-based markup…a foreign language to Angular. What I needed was a way to make Angular understand what XML was trying to communicate.

The key to overcoming any language gap is to have a translator. If there were a way to translate XML to JSON before handing it to the application then I could eliminate the language gap, and the problem.

A quick search for xml converters turned up multiple results. I chose Abdulla Abdurakhmano’s X2JS library because it was the first one I came across, it was lightweight, and it was pretty easy to use.

The code required to perform the translation is short and simple. Provide the library with XML, tell it which method to use, and receive JSON in return:


function(xml) {
 var x2js = new X2JS();
 var json = x2js.xml_str2json( xml );
 return json;
}
Where to Stick It
Now that I had a solution to the language gap I needed to decide where to implement it. Angular’s $http service conveniently applies transformation functions for both requests and responses. These functions apply transformations to data when it is sent and received, and they can be overridden.

Using the X2JS conversion code as a transformResponse function it was simple to get the $http service to read in XML and return JSON to the application, effectively creating the translator I needed. The results look something like this:

angular.module('myApp.service',[]).
    factory('DataSource', ['$http',function($http){
       return {
           get: function(callback){
                $http.get(
                    'data.xml',
                    {transformResponse:function(data) {
                      // convert the data to JSON and provide
                      // it to the success function below
                        var x2js = new X2JS();
                        var json = x2js.xml_str2json( data );
                        return json;
                        }
                    }
                ).
                success(function(data, status) {
                    // send the converted data back
                    // to the callback function
                    callback(data);
                })
           }
       }
    }]);

angular.module('myApp',['myApp.service']);

var AppController = function($scope,DataSource) {

    //This is the callback function
    setData = function(data) {
        $scope.dataSet = data;
    }

    DataSource.get(setData);

}
That’s really all there is to it! The example above will retrieve an xml file named “data.xml”, convert it to JSON, and assign the results to $scope.dataSet.

The Caveat
XML comes in all shapes and sizes. Some use attributes, others don’t, and many use a combination of both. Some XML files use a proper header, others are just fragments. Your application will likely require tweaking to get the data into the shape that your application requires. Always read the docs, read the comments, and experiment.

The example at the beginning of this post is a great starting point. Fork it and experiment with different libraries or XML formats.

Keep on Coding!

//---------------------------
//---------------------------
//-- Parsing PLS
//---------------------------
//---------------------------
https://gist.github.com/Offbeatmammal/1266499

// Make XHR request for the pls file
if (window.XMLHttpRequest) {
    // code for IE7 +, Firefox, Chrome, Opera, Safari
    xhr = new XMLHttpRequest();
} else {
// code for IE6, IE5
    xhr = new ActiveXObject("Microsoft.XMLHTTP");
}
xhr.open("GET", "http://{url}/{file}.pls", false);
xhr.send();
xhrDoc = xhr.responseText;

var pls = {};

// split into lines
pls.Entries = xhrDoc.split("\n");
// Entry 0 is [playlist]
// Entry 1 is NumberOfEntries=n
pls.Count = pls.Entries[1].split("=")[1];
// Entry 2,3,4 = File#=,Title#=,Length#=
// repeat from 1 to NumberOfEntries

pls.Items = [];
pls.curItem = 0;
pls.listOk = true;
for (var i = 0; i < pls.Count; i ++ ) {
    pls.Items.push( {
        file: pls.Entries[i + 2].split("=")[1],
        title: pls.Entries[i + 3].split("=")[1],
        length: pls.Entries[i + 4].split("=")[1]
    });
}
// get the audio element
pls.audio = document.getElementById("audio");

// hook onEnded and onError events to jump to next PLS item
pls.audio.addEventListener("error", audioEvent, false);
pls.audio.addEventListener("ended", audioEvent, false);

// load audio tag with first source
pls.listOk = loadPLS(pls.curItem ++ );

function audioEvent(event) {
// if the listOk is still true (ie not at the end of the list)
// step to the next item either on ended or error
    if (pls.listOk) {
        pls.listOk = loadPLS(pls.curItem ++ );
    } else {
// action to indicate end of stream
    }
}
function loadPLS(whichItem) {
    if (whichItem >= pls.Count) {
        return false;
    } else {
        pls.audio.autoplay = false;
        pls.audio.src = pls.Items[whichItem].file;
        var title = document.getElementById("title");
        title.innerText = pls.Items[whichItem].title + "[" + pls.curItem + "/" + pls.Items[whichItem].file + "]";
        return true;
    }
}


//---------------------------
//---------------------------
//-- Angular Audio Player
//---------------------------
//---------------------------

http://angular.github.io/peepcode-tunes/public/


<div class="playlist">
  <h1>Playlist</h1>
  <nav>
    <button ng-hide="player.playing" ng-click="player.play()" class="control play">Play</button>
    <button ng-show="player.playing" ng-click="player.pause()" class="control pause" style="display: none;">Pause</button>
    <button ng-click="player.previous()" class="control prev">Prev</button>
    <button ng-click="player.next()" class="control next">Next</button>
  </nav>
  <ul class="albums">
    <!-- ngRepeat: album in player.playlist -->
  </ul>
</div>



//--- js



'use strict';
(function(window) {
    var tunesApp = angular.module('tunesApp', []);
    window.TunesCtrl = function($scope, $http, player) {
        $scope.player = player;
        $http.get('albums.json').success(function(data) {
            $scope.albums = data;
        });
    };
    tunesApp.factory('player', function(audio, $rootScope) {
        var player,
            playlist = [],
            paused = false,
            current = {
                album: 0,
                track: 0
            };
        player = {
            playlist: playlist,
            current: current,
            playing: false,
            play: function(track, album) {
                if (!playlist.length) return;
                if (angular.isDefined(track)) current.track = track;
                if (angular.isDefined(album)) current.album = album;
                if (!paused) audio.src = playlist[current.album].tracks[current.track].url;
                audio.play();
                player.playing = true;
                paused = false;
            },
            pause: function() {
                if (player.playing) {
                    audio.pause();
                    player.playing = false;
                    paused = true;
                }
            },
            reset: function() {
                player.pause();
                current.album = 0;
                current.track = 0;
            },
            next: function() {
                if (!playlist.length) return;
                paused = false;
                if (playlist[current.album].tracks.length > (current.track + 1)) {
                    current.track++;
                } else {
                    current.track = 0;
                    current.album = (current.album + 1) % playlist.length;
                }
                if (player.playing) player.play();
            },
            previous: function() {
                if (!playlist.length) return;
                paused = false;
                if (current.track > 0) {
                    current.track--;
                } else {
                    current.album = (current.album - 1 + playlist.length) % playlist.length;
                    current.track = playlist[current.album].tracks.length - 1;
                }
                if (player.playing) player.play();
            }
        };
        playlist.add = function(album) {
            if (playlist.indexOf(album) != -1) return;
            playlist.push(album);
        };
        playlist.remove = function(album) {
            var index = playlist.indexOf(album);
            if (index == current.album) player.reset();
            playlist.splice(index, 1);
        };
        audio.addEventListener('ended', function() {
            $rootScope.$apply(player.next);
        }, false);
        return player;
    });
// extract the audio for making the player easier to test
    tunesApp.factory('audio', function($document) {
        var audio = $document[0].createElement('audio');
        return audio;
    });
})(window);

